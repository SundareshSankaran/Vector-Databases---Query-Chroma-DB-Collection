{"creationTimeStamp":"2024-01-29T23:04:49.476Z","modifiedTimeStamp":"2024-01-30T21:34:22.806Z","createdBy":"viya_admin","modifiedBy":"viya_admin","name":"Vector Databases - Query Chroma DB Collection.step","displayName":"Vector Databases - Query Chroma DB Collection.step","localDisplayName":"Vector Databases - Query Chroma DB Collection.step","properties":{},"links":[{"method":"GET","rel":"self","href":"/dataFlows/steps/f6e43965-0cd6-46d8-b0bb-e1bb5a91fa9e","uri":"/dataFlows/steps/f6e43965-0cd6-46d8-b0bb-e1bb5a91fa9e","type":"application/vnd.sas.data.flow.step"},{"method":"GET","rel":"alternate","href":"/dataFlows/steps/f6e43965-0cd6-46d8-b0bb-e1bb5a91fa9e","uri":"/dataFlows/steps/f6e43965-0cd6-46d8-b0bb-e1bb5a91fa9e","type":"application/vnd.sas.data.flow.step.summary"},{"method":"GET","rel":"up","href":"/dataFlows/steps","uri":"/dataFlows/steps","type":"application/vnd.sas.collection","itemType":"application/vnd.sas.data.flow.step.summary"},{"method":"PUT","rel":"update","href":"/dataFlows/steps/f6e43965-0cd6-46d8-b0bb-e1bb5a91fa9e","uri":"/dataFlows/steps/f6e43965-0cd6-46d8-b0bb-e1bb5a91fa9e","type":"application/vnd.sas.data.flow.step","responseType":"application/vnd.sas.data.flow.step"},{"method":"DELETE","rel":"delete","href":"/dataFlows/steps/f6e43965-0cd6-46d8-b0bb-e1bb5a91fa9e","uri":"/dataFlows/steps/f6e43965-0cd6-46d8-b0bb-e1bb5a91fa9e"},{"method":"GET","rel":"transferExport","href":"/dataFlows/steps/f6e43965-0cd6-46d8-b0bb-e1bb5a91fa9e","uri":"/dataFlows/steps/f6e43965-0cd6-46d8-b0bb-e1bb5a91fa9e","responseType":"application/vnd.sas.transfer.object"},{"method":"PUT","rel":"transferImportUpdate","href":"/dataFlows/steps/f6e43965-0cd6-46d8-b0bb-e1bb5a91fa9e","uri":"/dataFlows/steps/f6e43965-0cd6-46d8-b0bb-e1bb5a91fa9e","type":"application/vnd.sas.transfer.object","responseType":"application/vnd.sas.summary"}],"metadataVersion":0.0,"version":2,"type":"code","flowMetadata":{"inputPorts":[{"name":"inputTable","displayName":"inputTable","localDisplayName":"inputTable","minEntries":0,"maxEntries":1,"defaultEntries":0,"type":"table"}],"outputPorts":[{"name":"outputTable","displayName":"outputTable","localDisplayName":"outputTable","minEntries":1,"maxEntries":1,"defaultEntries":0,"type":"table","supportsView":false,"requiresStructure":false}]},"ui":"{\n\t\"showPageContentOnly\": true,\n\t\"pages\": [\n\t\t{\n\t\t\t\"id\": \"page1\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"Parameters\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"input_parameters\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Input parameters\",\n\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"collectionName\",\n\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\"label\": \"Provide Chroma DB collection name:\",\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"queryMode\",\n\t\t\t\t\t\t\t\"type\": \"dropdown\",\n\t\t\t\t\t\t\t\"label\": \"Select your query source:\",\n\t\t\t\t\t\t\t\"items\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"table\",\n\t\t\t\t\t\t\t\t\t\"label\": \"Input table\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"inline\",\n\t\t\t\t\t\t\t\t\t\"label\": \"Inline query\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\"enabled\": [\n\t\t\t\t\t\t\t\t\"false\",\n\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\"true\"\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"text3\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"Currently, we support an input CAS table with the query text in a column. Future versions will allow for the query to be directly entered.\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"inputTable\",\n\t\t\t\t\t\t\t\"type\": \"inputtable\",\n\t\t\t\t\t\t\t\"label\": \"Select input table:\",\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\"$queryMode\",\n\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\"table\"\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"enabled\": [\n\t\t\t\t\t\t\t\t\"$queryMode\",\n\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\"table\"\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"queryColumn\",\n\t\t\t\t\t\t\t\"type\": \"columnselector\",\n\t\t\t\t\t\t\t\"label\": \"Select query column:\",\n\t\t\t\t\t\t\t\"order\": false,\n\t\t\t\t\t\t\t\"columntype\": \"a\",\n\t\t\t\t\t\t\t\"max\": 1,\n\t\t\t\t\t\t\t\"min\": 1,\n\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\"$queryMode\",\n\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\"table\"\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"table\": \"inputTable\",\n\t\t\t\t\t\t\t\"enabled\": [\n\t\t\t\t\t\t\t\t\"$queryMode\",\n\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\"table\"\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"output_specifications\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Output specifications\",\n\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"numberOfResults\",\n\t\t\t\t\t\t\t\"type\": \"numstepper\",\n\t\t\t\t\t\t\t\"label\": \"Number of results to return per query:\",\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"integer\": false,\n\t\t\t\t\t\t\t\"min\": null,\n\t\t\t\t\t\t\t\"max\": null,\n\t\t\t\t\t\t\t\"stepsize\": 1\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"text2\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"To specify output, attach a table to the output port of this step.\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"outputTable\",\n\t\t\t\t\t\t\t\"type\": \"outputtable\",\n\t\t\t\t\t\t\t\"label\": \"Specify output table:\",\n\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"promoteTable\",\n\t\t\t\t\t\t\t\"type\": \"checkbox\",\n\t\t\t\t\t\t\t\"label\": \"Promote output table\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"page2\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"Configuration\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"section3\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Embedding Model\",\n\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"astoreTable_lib\",\n\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\"label\": \"Provide a caslib for the embedding model's astore table:\",\n\t\t\t\t\t\t\t\"placeholder\": \"e.g. Analytics-Project-1really-l0ng-alphanumer1c\",\n\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"astoreTable_name\",\n\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\"label\": \"Provide astore table name:\",\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"embeddingPattern\",\n\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\"label\": \"Provide a pattern representing the embedding columns:\",\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"persistentPathName\",\n\t\t\t\t\t\"type\": \"path\",\n\t\t\t\t\t\"label\": \"Select location for chroma database (defaults to /tmp):\",\n\t\t\t\t\t\"pathtype\": \"folder\",\n\t\t\t\t\t\"placeholder\": \"sasserver:/tmp\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"casHostPath\",\n\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\"label\": \"Default CAS server hostname:\",\n\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"casHostPort\",\n\t\t\t\t\t\"type\": \"numberfield\",\n\t\t\t\t\t\"label\": \"Default CAS server port:\",\n\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\"max\": null,\n\t\t\t\t\t\"min\": null,\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"about\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"About\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"about_description\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"text\": \"Vector Databases - Query Chroma DB Collection\\n==================================\\n\\nThis custom step queries a Chroma vector database collection and writes results to a SAS Cloud Analytics Services (CAS) table.\\n\\nVector databases facilitate Generative AI and other applications, notably providing context to a Large Language Model (LLM).  Examples of other applications include recommendation engines, similarity search and time series forecasting. \\n\\nChroma is an open-source vector database used in Generative AI pipelines.  It shares similar constructs and concepts with other vector store offerings. \",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"about_parameters\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Parameters\",\n\t\t\t\t\t\"open\": 0,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"section1\",\n\t\t\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\t\t\"label\": \"Assumptions \",\n\t\t\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"parameters_text\",\n\t\t\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\t\t\"text\": \"1.  Chroma DB follows client / server architecture.  This step implicitly considers the client and server to be on the same machine (see comments in code).  Users are free to modify the step for persistent, remote/external, or alternatively orchestrated (e.g. Docker container) servers based on their requirement.  Chroma DB documentation provides some examples (refer Documentation).\\n\\n2. Embeddings are assumed to be created with SAS Visual Text Analytics (VTA) for this version of the step.  This step requires a SAS Visual Text Analytics (VTA) license.    \\n\\n3.  This custom step runs on data loaded to a SAS Cloud Analytics Services (CAS) library (known as a caslib). Ensure you are connected to CAS before running this step.  Also, ensure that your output caslib destination is writeable.\\n\\n4.  Proc Python is required.  Required Python packages are listed in prerequisites section.  Also, consider build and install of  Python and required packages through the SAS Configurator for Open Source.\\n\\n5.  This custom step provides embeddings to Chroma at the time of query and does not use Chroma's embedding function.  Embedding function support will be considered in future. \",\n\t\t\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"section2\",\n\t\t\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\t\t\"label\": \"Prerequisites\",\n\t\t\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"text1\",\n\t\t\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\t\t\"text\": \"1. A SAS Viya 4 environment version 2023.12 or later.\\n\\n2. Python packages to be installed:\\n\\n   i.   chromadb\\n   ii.  pysqlite-binary\\n   iii. pandas\\n   iv. swat\\n\\n3. Suggested Python version is 3.10.x due to dependency on sqlite version >= 3.35.0 (refer documentation).  However, a workaround suggested by Chroma has been followed in the code.\\n\\n4. Optional components, based on site-specific architecture, are to have a separate Chroma DB server for persistence and scale.  Refer Chroma documentation for details.\",\n\t\t\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"parameters_input\",\n\t\t\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\t\t\"label\": \"Input parameters\",\n\t\t\t\t\t\t\t\"open\": 1,\n\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"input_parameters_text\",\n\t\t\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\t\t\"text\": \"1. Name of Chroma DB collection(text field, required): provide the name of the Chroma DB collection you might have populated earlier.  You can't query a collection if you don't know the name for the same.\\n\\n2. Query source (drop-down list, frozen): currently set at \\\"Input table\\\" for this version.  Other options will be examined in future releases.\\n\\n3  Input table containing a text column (input port, required): attach a CAS table to this port. \\n\\n4. Query column (column selector, required, maximum 1): select a text column which contains the query you wish to pass to the database.\",\n\t\t\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"parameters_output_specs\",\n\t\t\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\t\t\"label\": \"Output specifications\",\n\t\t\t\t\t\t\t\"open\": 1,\n\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"output_parameters_text\",\n\t\t\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\t\t\"text\": \"1. Number of results (numeric stepper): provide the number of results you wish to have returned for each observation of the query column. \\n\\n2. Output table (output port, required): attach a CAS table to the output port of this node to hold results.\\n\\n3. Promote (check box): check this box if you wish to have the output table promoted to global scope (and be available beyond the SAS Studio session)\\n\\nUpon successful completion, the output table will contain the query, the id of the result documents, distance measure and the document content.\",\n\t\t\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"parameters_config_1\",\n\t\t\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\t\t\"label\": \"Configuration \",\n\t\t\t\t\t\t\t\"open\": 1,\n\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"output_parameters_text_1\",\n\t\t\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\t\t\"text\": \"1. Embedding model caslib (text field, required):  provide the caslib containing a VTA embedding model which will be applied to the query in order to generate embeddings.\\n\\n2. Embedding model astore name (text field, required): provide the name of a VTA astore model to generate embeddings on the query text. \\n\\n------------------------------------------------------------------\\nFollow this process to obtain the above values:\\n\\n(i) In Model Studio, right click on the topics node you used to create an embeddings model.  Select Results\\n(ii) In the score code portion of the results, locate and copy the values of the following macro variables: input_astore_caslib_name & input_astore_name.  Use in the above two fields.\\n(iii) Some users may choose to develop embedding models programmatically.  They would have specified an astore name and caslib while doing so, which can be used for above fields.\\n------------------------------------------------------------------\\n\\n3. Embedding pattern (text column, required, default of _Col):  document embeddings tend to be long series involving 100s or sometimes 1000s of columns.  Provide a text pattern which applies to all embedding column names. For example,  _Col represents _Col_1, _Col_2..... _Col_n.  A default of _Col is provided since this happens to be the default value for Visual Text Analytics-generated embeddings.\\n\\n4. Location for Chroma database (folder selector, required): select a location where the Chroma database is persisted.  Note this needs to be on the filesystem (SAS Server) and not SAS Content.  \\n\\n5. CAS server (text field, default entered): change this only if you need a CAS server name different from a typical Viya 4 installation.\\n\\n6. CAS port (numeric field, default entered): change this only if you know that the CAS server runs on a different port than the default.\",\n\t\t\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"about_runtimecontrol\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Run-time Control\",\n\t\t\t\t\t\"open\": 0,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"runtimecontrol_text\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"Note: Run-time control is optional.  You may choose whether to execute the main code of this step or not, based on upstream conditions set by earlier SAS programs.  This includes nodes run prior to this custom step earlier in a SAS Studio Flow, or a previous program in the same session.\\n\\nRefer this blog (https://communities.sas.com/t5/SAS-Communities-Library/Switch-on-switch-off-run-time-control-of-SAS-Studio-Custom-Steps/ta-p/885526) for more details on the concept.\\n\\nThe following macro variable,\\n\\n_qcd_run_trigger\\n\\nwill initialize with a value of 1 by default, indicating an \\\"enabled\\\" status and allowing the custom step to run.\\n\\nIf you wish to control execution of this custom step, include code in an upstream SAS program to set this variable to 0.  This \\\"disables\\\" execution of the custom step.\\n\\nTo \\\"disable\\\" this step, run the following code upstream:\\n\\n%global _qcd_run_trigger;\\n%let _qcd_run_trigger =0;\\n\\nTo \\\"enable\\\" this step again, run the following (it's assumed that this has already been set as a global variable):\\n\\n%let _qcd_run_trigger =1;\\n\\nIMPORTANT: Be aware that disabling this step means that none of its main execution code will run, and any  downstream code which was dependent on this code may fail.  Change this setting only if it aligns with the objective of your SAS Studio program.\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"about_documentation\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Documentation\",\n\t\t\t\t\t\"open\": 0,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"documentation_text\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"1. Documentation for the chromadb Python package: https://docs.trychroma.com\\n\\n2. An important note regarding sqlite: https://docs.trychroma.com/troubleshooting#sqlite\\n\\n3. SAS Communities article on configuring Viya for Python integration: https://communities.sas.com/t5/SAS-Communities-Library/Configuring-SAS-Viya-for-Python-Integration/ta-p/847459\\n\\n4. The SAS Viya Platform Deployment Guide (refer to SAS Configurator for Open Source within): https://go.documentation.sas.com/doc/en/itopscdc/default/itopssr/p1n66p7u2cm8fjn13yeggzbxcqqg.htm?fromDefault=#p19cpvrrjw3lurn135ih46tjm7oi \\n\\n5.  Options for persistent clients and client connections in Chroma: https://docs.trychroma.com/usage-guide\\n\\n6.  Every custom step is a learning opportunity for SAS programming!  I revisited the venerable but still powerful DATALINES (DATALINES4) statement and it proved helpful in negotiating a design challenge in the SAS program.  Documentation: https://go.documentation.sas.com/doc/en/pgmsascdc/default/lestmtsref/p1mm9b070wj962n16q0v1d9uku5q.htm\\n\\n7. Documentation for the Analytic Store Scoring action set: https://go.documentation.sas.com/doc/en/pgmsascdc/default/casactml/casactml_astore_toc.htm \\n\\n8. SAS Communities article on connecting to CAS using the SWAT package in SAS Studio: https://communities.sas.com/t5/SAS-Communities-Library/Hotwire-your-SWAT-inside-SAS-Studio/ta-p/835956\\n\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"version_text\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"text\": \"Version: 1.0  (30JAN2024)\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"contact_text\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"text\": \"Created/contact: \\n\\n- Sundaresh Sankaran (sundaresh.sankaran@sas.com)\\n\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n\t\"syntaxversion\": \"1.3.0\",\n\t\"values\": {\n\t\t\"collectionName\": \"new_collection\",\n\t\t\"queryMode\": {\n\t\t\t\"value\": \"table\",\n\t\t\t\"label\": \"Input table\"\n\t\t},\n\t\t\"inputTable\": {\n\t\t\t\"library\": \"\",\n\t\t\t\"table\": \"\"\n\t\t},\n\t\t\"queryColumn\": [],\n\t\t\"numberOfResults\": 5,\n\t\t\"outputTable\": {\n\t\t\t\"library\": \"\",\n\t\t\t\"table\": \"\"\n\t\t},\n\t\t\"promoteTable\": false,\n\t\t\"astoreTable_lib\": \"\",\n\t\t\"astoreTable_name\": \"\",\n\t\t\"embeddingPattern\": \"_Col\",\n\t\t\"persistentPathName\": \"\",\n\t\t\"casHostPath\": \"sas-cas-server-default-client\",\n\t\t\"casHostPort\": 5570\n\t}\n}","templates":{"SAS":"/* templated code goes here*/;\n\n/* -----------------------------------------------------------------------------------------* \n   Vector Databases - Query Chroma DB Collection\n\n   Version: 1.0 (30JAN2024)\n   Created: Sundaresh Sankaran(sundaresh.sankaran@sas.com)\n    \n*------------------------------------------------------------------------------------------ */\n\n/*-----------------------------------------------------------------------------------------*\n   Python Block Definition\n*------------------------------------------------------------------------------------------*/\n\n/*-----------------------------------------------------------------------------------------*\n   The following block of code has been created for the purpose of allowing proc python \n   to execute within a macro. Execution within a macro allows for other checks to be carried \n   out through SAS prior to handing off to the Python step.\n\n   In this example, a temporary file is created containing the requisite Python commands, which \n   are then executed through infile reference.\n\n   Note that Python code is pasted as-is and may be out of line with the SAS indentation followed.\n\n*------------------------------------------------------------------------------------------*/\nfilename qcdcode temp;\n\ndata _null_;\n\n   infile datalines4 truncover pad;\n   input ;   \n   file qcdcode;\n   put @1 _infile_;\n   datalines4;\n\n#############################################################################################\n#\n#  Obtain values from UI or other SAS macro variables\n#\n#############################################################################################\n\ncas_host_path       = SAS.symget(\"casHostPath\")\ncas_host_port       = SAS.symget(\"casHostPort\")\npersistent_path     = SAS.symget(\"persistentPath\")\n\nsessuuid            = SAS.symget(\"_current_uuid_\")\nembedded_table_name = \"_tmp_\"+SAS.symget(\"outputTable_name_base\")\nembedded_table_lib  = SAS.symget(\"outputCaslib\")\nquery_column        = SAS.symget(\"queryColumn\")\n\noutput_table_name   = SAS.symget(\"outputTable_name_base\")\noutput_table_lib    = SAS.symget(\"outputCaslib\")\ninput_table_name    = SAS.symget(\"inputTable_name_base\")\ninput_table_lib     = SAS.symget(\"inputCaslib\")\n\ncollection_name     = SAS.symget(\"collectionName\")\nembedding_pattern   = SAS.symget(\"embeddingPattern\")\nnumber_of_results   = int(SAS.symget(\"numberOfResults\"))\npromote_table       = int(SAS.symget(\"promoteTable\"))\npromote_flag        = True if promote_table == 1 else False\nreplace_flag        = False if promote_flag else True\n\n\n#############################################################################################\n#\n#  The pysqlite3 import allows for the code to also run in (some) older Python (or sqlite) versions.\n#\n#############################################################################################\n\n__import__('pysqlite3')\nimport sys\nsys.modules['sqlite3'] = sys.modules.pop('pysqlite3')\n\n#############################################################################################\n#\n#  Refer https://docs.trychroma.com/telemetry for details.  Recommend to opt out of anonymized \n#  unless you can confidently configure permissions on the Python build location (admin-level).\n#\n#############################################################################################\n\nos.environ['ANONYMIZED_TELEMETRY'] = \"False\"\n\n#############################################################################################\n#\n#  Connect to CAS through the swat package\n#\n#############################################################################################\n\nimport os\nimport swat\n\nos.environ['CAS_CLIENT_SSL_CA_LIST']=os.environ['SSLCALISTLOC']\nSAS.logMessage(\"Session UUID is {}\".format(sessuuid))   \n\nconn = swat.CAS(hostname=cas_host_path,port=cas_host_port, password=os.environ['SAS_SERVICES_TOKEN'],session=sessuuid)\nSAS.logMessage(\"Connection to CAS suceeded.\")   \n\n\n#############################################################################################\n#\n#  Import chromadb\n#\n#############################################################################################\n\nimport chromadb\n\n\n#############################################################################################\n#\n#  Connect to a Chroma server (refer About for notes about this delineation)\n#\n#############################################################################################\n\nchroma_client = chromadb.PersistentClient(path=persistent_path)\n\nSAS.logMessage(\"Chroma client alive at: {}\".format(chroma_client.heartbeat()))\n\ncollection = chroma_client.get_collection(name=collection_name)\n\nSAS.logMessage(\"Collection: {} documents at present\".format(collection.count()))\n\n#############################################################################################\n#\n#  Refer to the table containing embeddings and create a list of embeddings\n#\n#############################################################################################\n\nimport pandas\n\ntbl=conn.CASTable(name=embedded_table_name,caslib=embedded_table_lib)\n\ndf = pandas.DataFrame()\ndf['Embeddings'] = (\n    tbl.to_frame().filter(like=embedding_pattern)\n      .apply(lambda row: row.dropna().tolist(), axis=1)\n)\n\nembedding_list = df['Embeddings'].tolist()\n\n#############################################################################################\n#\n#  Query the collection passing embeddings as an argument\n#\n#############################################################################################\n\nresults = collection.query(\n    query_embeddings=embedding_list,\n    n_results=number_of_results)\n\nresults[\"Query_Text\"] = [[query for i in range(0,number_of_results)] for query in tbl[query_column]]\n\n\n#############################################################################################\n#\n#  Create a dataframe from the results\n#\n#############################################################################################\n\nres_df = pandas.DataFrame({\"Query_Text\":[q for t in results[\"Query_Text\"] for q in t],\"ids\":[i for d in results[\"ids\"] for i in d], \"distances\":[d for s in results[\"distances\"] for d in s], \"documents\":[doc for ment in results[\"documents\"] for doc in ment]})\n\n#############################################################################################\n#\n#  Load to a CAS table and promote as per user specification\n#\n#############################################################################################\n\nif promote_flag:\n   table_exists_flag = conn.CASTable(name=output_table_name, caslib=output_table_lib).exists()\n   if table_exists_flag:\n      try:\n         tmp_copy = conn.CASTable(name=output_table_name, caslib=output_table_lib).copyTable(casout={\"name\":output_table_name+\"_tmp\", \"caslib\":output_table_lib, \"replace\":True})\n         conn.CASTable(name=output_table_name, caslib=output_table_lib).dropTable()\n      except Exception as e:\n         SAS.logMessages(e,\"ERROR\")\ncas_table = conn.CASTable(name=output_table_name, caslib=output_table_lib, replace=replace_flag, promote=promote_flag)\ncas_table.from_dict(data=res_df, connection=conn, casout=cas_table)\nconn.CASTable(name=embedded_table_name,caslib=embedded_table_lib).dropTable()\n\nSAS.logMessage(\"Table loaded with results from query\")\n\n;;;;\n   \n\nrun;\n\n/*-----------------------------------------------------------------------------------------*\n   START MACRO DEFINITIONS.\n*------------------------------------------------------------------------------------------*/\n\n/* -----------------------------------------------------------------------------------------* \n   Macro to create an error flag for capture during code execution.\n\n   Input:\n      1. errorFlagName: The name of the error flag you wish to create. Ensure you provide a \n         unique value to this parameter since it will be declared as a global variable.\n\n    Output:\n      2. &errorFlagName : A global variable which takes the name provided to errorFlagName.\n\n   Also available at: \n   https://github.com/SundareshSankaran/sas_utility_programs/blob/main/code/Error%20Flag%20Creation/macro_create_error_flag.sas\n*------------------------------------------------------------------------------------------ */\n\n\n%macro _create_error_flag(errorFlagName);\n\n   %global &errorFlagName.;\n   %let  &errorFlagName.=0;\n\n%mend _create_error_flag;\n\n\n\n/* -------------------------------------------------------------------------------------------* \n   Macro to initialize a run-time trigger global macro variable to run SAS Studio Custom Steps. \n   A value of 1 (the default) enables this custom step to run.  A value of 0 (provided by \n   upstream code) sets this to disabled.\n\n   Input:\n   1. triggerName: The name of the runtime trigger you wish to create. Ensure you provide a \n      unique value to this parameter since it will be declared as a global variable.\n\n   Output:\n   2. &triggerName : A global variable which takes the name provided to triggerName.\n   \n   Also available at:\n   https://github.com/SundareshSankaran/sas_utility_programs/blob/main/code/Create_Run_Time_Trigger/macro_create_runtime_trigger.sas\n*-------------------------------------------------------------------------------------------- */\n\n%macro _create_runtime_trigger(triggerName);\n\n   %global &triggerName.;\n\n   %if %sysevalf(%superq(&triggerName.)=, boolean)  %then %do;\n  \n      %put NOTE: Trigger macro variable &triggerName. does not exist. Creating it now.;\n      %let &triggerName.=1;\n\n   %end;\n\n%mend _create_runtime_trigger;\n\n\n/*-----------------------------------------------------------------------------------------*\n   Macro variable to capture indicator of a currently active CAS session\n*------------------------------------------------------------------------------------------*/\n\n%global casSessionExists;\n%global _current_uuid_;\n\n\n/*-----------------------------------------------------------------------------------------*\n   Macro to capture indicator and UUIDof any currently active CAS session.\n   UUID is not expensive and can be used in future to consider graceful reconnect.\n\n   Input:\n   1. errorFlagName: name of an error flag that gets populated in case the connection is \n                     not active. Provide this value in quotes when executing the macro.\n                     Define this as a global macro variable in order to use downstream.\n   \n   Output:\n   1. Informational note as required. We explicitly don't provide an error note since \n      there is an easy recourse(of being able to connect to CAS)\n   2. UUID of the session: macro variable which gets created if a session exists.\n\n   Also available at: https://raw.githubusercontent.com/SundareshSankaran/sas_utility_programs/main/code/Check_For_Python/macro_python_check.sas\n*------------------------------------------------------------------------------------------*/\n\n%macro _env_cas_checkSession(errorFlagName);\n    %if %sysfunc(symexist(_current_uuid_)) %then %do;\n       %symdel _current_uuid_;\n    %end;\n    %if %sysfunc(symexist(_SESSREF_)) %then %do;\n      %let casSessionExists= %sysfunc(sessfound(&_SESSREF_.));\n      %if &casSessionExists.=1 %then %do;\n         %global _current_uuid_;\n         %let _current_uuid_=;   \n         proc cas;\n            session.sessionId result = sessresults;\n            call symputx(\"_current_uuid_\", sessresults[1]);\n         quit;\n         %put NOTE: A CAS session &_SESSREF_. is currently active with UUID &_current_uuid_. ;\n      %end;\n      %else %do;\n         %put NOTE: Unable to find a currently active CAS session ;\n         data _null_;\n            call symputx(&errorFlagName., 1);\n        run;\n      %end;\n   %end;\n   %else %do;\n      %put NOTE: No active CAS session ;\n      data _null_;\n        call symputx(&errorFlagName., 1);\n      run;\n   %end;\n%mend _env_cas_checkSession;\n\n\n/*-----------------------------------------------------------------------------------------*\n   This macro creates a global macro variable called _usr_nameCaslib\n   that contains the caslib name (aka. caslib-reference-name) associated with the libname \n   and assumes that the libname is using the CAS engine.\n\n   As sysvalue has a length of 1024 chars, we use the trimmed option in proc sql\n   to remove leading and trailing blanks in the caslib name.\n   From macro provided by Wilbram Hazejager\n*------------------------------------------------------------------------------------------*/\n\n%macro _usr_getNameCaslib(_usr_LibrefUsingCasEngine); \n\n   %global _usr_nameCaslib;\n   %let _usr_nameCaslib=;\n\n   proc sql noprint;\n      select sysvalue into :_usr_nameCaslib trimmed from dictionary.libnames\n      where libname = upcase(\"&_usr_LibrefUsingCasEngine.\") and upcase(sysname)=\"CASLIB\";\n   quit;\n\n%mend _usr_getNameCaslib;\n\n/* -------------------------------------------------------------------------------------------* \n    Macro to check whether compute session where this program runs is aware of a path to Python.\n    Identification done through the PROC_PYPATH environment variable. If Python is found, a macro \n    variable is created with the path.  If not, an error message is output and an error flag \n    specified by user is flagged with a 1 (to indicate an error).  Flag can be used in downstream\n    code if specified as a global variable.\n\n\tThis macro will be updated with a more robust check for Python environments in future.\n\n    Input:\n    1. errorFlagName: Provide this with quotes when executing the macro. Name of an error flag macro \n                      variable. Specify this variable as global so that it can be used downstream.\n    Output:\n    1. PROC_PYPATH : A global variable which contains the path where Python can be found.\n    2. Informational or error message as applicable written to log.\n    3. errorFlagName macro variable modified if necessary.\n    \n    Also available at: https://raw.githubusercontent.com/SundareshSankaran/sas_utility_programs/main/code/Check_For_Python/macro_python_check.sas\n *-------------------------------------------------------------------------------------------- */\n\n %macro _env_check_python(errorFlagName);\n\n     %global PROC_PYPATH;\n\n     data _null_;\n        proc_pypath = sysget('PROC_PYPATH');\n        if proc_pypath = \"\" then do;\n           call symputx(&errorFlagName.,1);\n        end;\n        else do;\n           call symput(\"PROC_PYPATH\", proc_pypath);\n        end;\n     run;\n\n     %if \"&PROC_PYPATH.\" = \"\" %then %do;\n           %put ERROR: Python is not available or configured in this compute session ;\n     %end;\n     %else %do;\n           %put NOTE: Python is available in this compute session;\n     %end;\n\n  %mend _env_check_python;\n\n/* -----------------------------------------------------------------------------------------* \n   Macro to identify whether a given folder location provided from a \n   SAS Studio Custom Step folder selector happens to be a SAS Content folder\n   or a folder on the filesystem (SAS Server).\n\n   Input:\n   1. pathReference: A path reference provided by the file or folder selector control in \n      a SAS Studio Custom step.\n\n   Output:\n   1. _path_identifier: Set inside macro, a global variable indicating the prefix of the \n      path provided.\n\n   Also available at: https://raw.githubusercontent.com/SundareshSankaran/sas_utility_programs/main/code/Identify%20SAS%20Content%20or%20Server/macro_identify_sas_content_server.sas\n\n*------------------------------------------------------------------------------------------ */\n%macro _identify_content_or_server(pathReference);\n   %global _path_identifier;\n   data _null_;\n      call symput(\"_path_identifier\", scan(\"&pathReference.\",1,\":\",\"MO\"));\n   run;\n   %put NOTE: _path_identifier is &_path_identifier. ;\n%mend _identify_content_or_server;\n\n/* -----------------------------------------------------------------------------------------* \n   Macro to extract the path provided from a SAS Studio Custom Step file or folder selector.\n\n   Input:\n   1. pathReference: A path reference provided by the file or folder selector control in \n      a SAS Studio Custom step.\n\n   Output:\n   1. _sas_folder_path: Set inside macro, a global variable containing the path.\n\n   Also available at: https://raw.githubusercontent.com/SundareshSankaran/sas_utility_programs/main/code/Extract%20SAS%20Folder%20Path/macro_extract_sas_folder_path.sas\n\n*------------------------------------------------------------------------------------------ */\n%macro _extract_sas_folder_path(pathReference);\n   %global _sas_folder_path;\n   data _null_;\n      call symput(\"_sas_folder_path\", scan(\"&pathReference.\",2,\":\",\"MO\"));\n   run;\n%mend _extract_sas_folder_path;\n\n/*-----------------------------------------------------------------------------------------*\n   EXECUTION CODE MACRO \n*------------------------------------------------------------------------------------------*/\n\n%macro _qcd_main_execution_code;\n\n/*-----------------------------------------------------------------------------------------*\n   Create an error flag. \n*------------------------------------------------------------------------------------------*/\n\n   %_create_error_flag(_qcd_error_flag);\n\n\n/*-----------------------------------------------------------------------------------------*\n   Check if Python's available in the environment. \n*------------------------------------------------------------------------------------------*/\n\n   %_env_check_python(\"_qcd_error_flag\");\n\n/*-----------------------------------------------------------------------------------------*\n   Check if an active CAS session exists. \n*------------------------------------------------------------------------------------------*/\n\n   %global casSessionExists;\n\n   %if &_qcd_error_flag.=0 %then %do;\n      %_env_cas_checkSession(\"_qcd_error_flag\");\n   %end;\n\n/*-----------------------------------------------------------------------------------------*\n   Check Input table libref to ensure it points to a valid caslib.\n*------------------------------------------------------------------------------------------*/\n\n   %if &_qcd_error_flag. = 0 %then %do;\n\n      %global inputCaslib;\n   \n      %_usr_getNameCaslib(&inputTable_lib.);\n      %let inputCaslib=&_usr_nameCaslib.;\n      %put NOTE: &inputCaslib. is the caslib for the input table.;\n      %let _usr_nameCaslib=;\n\n      %if \"&inputCaslib.\" = \"\" %then %do;\n         %put ERROR: Library selected for input table needs to point to a caslib. ;\n         %let _qcd_error_flag=1;\n      %end;\n\n   %end;\n\n/*-----------------------------------------------------------------------------------------*\n   Check Output table libref to ensure it points to a valid caslib.\n*------------------------------------------------------------------------------------------*/\n\n   %if &_qcd_error_flag. = 0 %then %do;\n\n      %global outputCaslib;\n   \n      %_usr_getNameCaslib(&outputTable_lib.);\n      %let outputCaslib=&_usr_nameCaslib.;\n      %put NOTE: &outputCaslib. is the caslib for the output table.;\n      %let _usr_nameCaslib=;\n\n      %if \"&outputCaslib.\" = \"\" %then %do;\n         %put ERROR: Library selected for output table needs to point to a caslib. ;\n         %let _qcd_error_flag=1;\n      %end;\n\n   %end;\n\n\n\n/*-----------------------------------------------------------------------------------------*\n   Check if path provided happens to be a filesystem (SAS Server) or SAS Content path. \n   Prior to that, check if a path has in fact been provided.\n*------------------------------------------------------------------------------------------*/\n\n   %if &_qcd_error_flag. = 0 %then %do;\n\n      %if \"&persistentPathName.\"=\"\" %then %do;\n            %let _qcd_error_flag=1;\n            %put ERROR: Please provide a valid path for the collection.  In order to query the collection, you need to know where it is located. ;\n      %end;\n      %else %do;\n         %_identify_content_or_server(&persistentPathName.);\n         %if \"&_path_identifier.\"=\"sasserver\" %then %do;\n            %put NOTE: Folder location prefixed with &_path_identifier. is on the SAS Server.;\n         %end;\n         %else %do;\n            %let _qcd_error_flag=1;\n            %put ERROR: Please select a valid folder on the SAS Server where the database resides. ;\n         %end;\n      %end;\n\n   %end;\n\n/*-----------------------------------------------------------------------------------------*\n   Extract path from the UI macro variable provided.\n*------------------------------------------------------------------------------------------*/\n   %if &_qcd_error_flag. = 0 %then %do;\n      %_extract_sas_folder_path(&persistentPathName.);\n      %let persistentPath = &_sas_folder_path.;\n      %let _sas_folder_path=;\n   %end;\n\n/*-----------------------------------------------------------------------------------------*\n   Generate embeddings for the query text with the specified model\n*------------------------------------------------------------------------------------------*/\n   %if &_qcd_error_flag. = 0 %then %do;\n\n      proc cas;\n\n         astore_table_lib  = symget(\"astoreTable_lib\");\n         astore_table_name = symget(\"astoreTable_name\");\n         input_table_lib   = symget(\"inputTable_lib\");\n         input_table_name  = symget(\"inputTable_name_base\"); \n         output_table_lib  = symget(\"outputTable_lib\");\n         output_table_name = symget(\"outputTable_name_base\"); \n         query_variable    = symget(\"queryColumn\");\n\n\n         loadactionset \"astore\";\n      \t astore.describe result=astore_results /\n            rstore={caslib=astore_table_lib, name=astore_table_name}\n         ;\n\n         text_var= astore_results['InputVariables'][1]['Name'];\n\n         table.copyTable /\n            table  = {name = input_table_name, caslib = input_table_lib},\n            casout = {name =\"_tmp_\"||input_table_name, caslib=output_table_lib, replace=True}\n         ;\n\n         table.alterTable /\n            caslib = output_table_lib,\n            name   = \"_tmp_\"||input_table_name,\n            columns= {{name=query_variable, rename=text_var}}\n         ;\n\n\t     astore.score /\n            table={caslib=output_table_lib, name=\"_tmp_\"||input_table_name},\n            rstore={caslib=astore_table_lib, name=astore_table_name},\n            out={caslib=output_table_lib, name=\"_tmp_\"||output_table_name, replace=TRUE}\n            copyVars={text_var};\n         ;       \n\n         table.alterTable /\n            caslib = output_table_lib,\n            name   = \"_tmp_\"||output_table_name,\n            columns= {{name=text_var, rename=query_variable}}\n         ;\n\n         table.dropTable / \n            name=\"_tmp_\"||input_table_name, \n            caslib=output_table_lib\n         ;\n\n      quit;\n\n   %end;\n\n\n/*-----------------------------------------------------------------------------------------*\n   Run Python block (accepts inputs and loads documents along with embeddings)\n*------------------------------------------------------------------------------------------*/\n   %if &_qcd_error_flag. = 0 %then %do;\n\n      proc python infile = qcdcode;\n      quit;\n\n      filename qcdcode clear;\n\n   %end;\n\n%mend _qcd_main_execution_code;\n\n/*-----------------------------------------------------------------------------------------*\n   END MACRO DEFINITIONS\n*------------------------------------------------------------------------------------------*/\n\n/*-----------------------------------------------------------------------------------------*\n   EXECUTION CODE\n   The execution code is controlled by the trigger variable defined in this custom step. This\n   trigger variable is in an \"enabled\" (value of 1) state by default, but in some cases, as \n   dictated by logic, could be set to a \"disabled\" (value of 0) state.\n*------------------------------------------------------------------------------------------*/\n/*-----------------------------------------------------------------------------------------*\n   Create run-time trigger. \n*------------------------------------------------------------------------------------------*/\n\n%_create_runtime_trigger(_qcd_run_trigger);\n\n%if &_qcd_run_trigger. = 1 %then %do;\n\n   %_qcd_main_execution_code;\n\n%end;\n\n%if &_qcd_run_trigger. = 0 %then %do;\n\n   %put NOTE: This step has been disabled.  Nothing to do.;\n\n%end;\n\n\n/*-----------------------------------------------------------------------------------------*\n   Clean up existing macro variables and macro definitions.\n*------------------------------------------------------------------------------------------*/\n%if %symexist(_qcd_error_flag) %then %do;\n   %symdel _qcd_error_flag;\n%end;\n\n%if %symexist(casSessionExists) %then %do;\n   %symdel casSessionExists;\n%end;\n\n%if %symexist(inputCaslib) %then %do;\n   %symdel inputCaslib;\n%end;\n\n%if %symexist(outputCaslib) %then %do;\n   %symdel outputCaslib;\n%end;\n\n%if %symexist(PROC_PYPATH) %then %do;\n   %symdel PROC_PYPATH;\n%end;\n\n%if %symexist(_current_uuid_) %then %do;\n   %symdel _current_uuid_;\n%end;\n\n%if %symexist(_sas_folder_path) %then %do;\n   %symdel _sas_folder_path;\n%end;\n\n%if %symexist(_path_identifier) %then %do;\n   %symdel _path_identifier;\n%end;\n\n%if %symexist(_qcd_run_trigger) %then %do;\n   %symdel _qcd_run_trigger;\n%end;\n\n\n/*-----------------------------------------------------------------------------------------*\n   Clean up existing macro variables and macro definitions.\n*------------------------------------------------------------------------------------------*/\n%sysmacdelete _qcd_main_execution_code;\n%sysmacdelete _env_check_python;\n%sysmacdelete _usr_getNameCaslib;\n%sysmacdelete _env_cas_checkSession;\n%sysmacdelete _extract_sas_folder_path;\n%sysmacdelete _identify_content_or_server;\n%sysmacdelete _create_runtime_trigger;\n%sysmacdelete _create_error_flag;\n\n"}}